//
// Hail Diffrential Reflectivity as described by Aydin, K., Seliga, T. A., & Balaji, V. (1986)
// Made by James Hyde - Twitter: @wxmeddler for use in Gibson Ridge Software Version 3
// Any question/comments can be sent to wxmeddler@gmail.com or DM on twitter.
// This Gibson Ridge v3 Color Table by James Hyde is licensed under CC BY-NC-SA 4.0. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
// Please refrain from removing these comments :)

//******************************************************************************

Product
 {
  Name = "HDR2"                              // Name as it will appear in GR2AE3
  
  Category
   {
    Missing = -10                            // Absolute lowest value possible
    Minimum = -10                            // category minimum value
    Maximum = 50	                           // category maximum value
    Units   = "dB"
	
    ColorTable                               // color table for category
     {
      Units = "dB"
      Step  = 5
	
      Color[10] = solid(rgb(50,255,50))      // green    10 to 15 - Non-Severe Hail
      Color[15] = solid(rgb(255,255,0))      // yellow   15 to 20 - Low Confidence Severe Hail
      Color[20] = solid(rgb(255,200,50))     // orange   20 to 25 - Severe Hail Start
      Color[25] = solid(rgb(255,0,0))        // red      25 to 30 - High Confidence in Severe Hail
      Color[30] = solid(rgb(0,0,255))        // blue     30 to 35 - Large Hail Or Severe Wet Hail
      Color[35] = solid(rgb(125,0,255))      // purple   35 to 40 - Chonker Hail
      Color[40] = solid(rgb(250,75,195))     // hot pink 40 to 45 - OH LAWD HAIL COMIN
      Color[45] = rgb(250,75,195)
     }
   }

  min_br_required = 20                       // skip columns with BR < 20 dbz
  resolution = high                          // 0.5 km x 0.5 degree km bins
 }


//******************************************************************************

Program
 {
  float br;                                  // declare variables
  float zdr;

  Curve fzdr_from_zdr =                      // declare piecewise linear curve for zdr to fzdr
   {
    { 0.00, 27 },                            // when zdr <= 0.00, output 27
    { 1.74, 60 }                             // when zdr <  1.74, linearly interpolate from 27 to 60
   };


  br  = BRfromHGT(constants.hgt_lowest);     // Take the Reflectivity from base scan
  zdr = ZDRfromHGT(constants.hgt_lowest);    // Take the ZDR from base scan

  return br - fzdr_from_zdr[zdr];            // convert zdr to fzdr and subtract from br
 }

