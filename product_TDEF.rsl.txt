
//
// TDS Height to EF Scale UDP
// ---------------------------
//
// This shader uses an advanced TDS detector on a column to determine the
// maximum height of the TDS. It then translates the TDS height to EF scale
// using the chart here:
//
//   https://twitter.com/ou_sams/status/1102368481251598347/photo/2
//
// A mouse hover over data generated by this shader shows the position in 
// the EF violins shown in the chart, *not* some sort of fine-grained EF
// scale prediction. For example, a TDSH of 15 kft translates to 3.5 but
// that does *not* mean it is a medium strength EF-3 tornado. It means that
// the height falls in the middle of the EF-3 violin.
//
//

//******************************************************************************

Product
 {
  Name = "TDEF"    	// product name is TDEF

  Min_BR_Required = 25
  Resolution = high

  Category
   {
    Missing = 0		// physical value for ND
    Minimum = 0		// category minimum value
    Maximum = 5		// category maximum value
    Units   = "EF"

    ColorTable		// color table for category
     {
      Units    = "EF"
      Step     = 1

      Color[ 5]   = rgb( 255, 255, 255 )					// EF5 = white
      Color[ 4]   = solid( rgb( 255,   0, 255 ) )			// EF4 = purple
      Color[ 3]   = solid( rgb( 220,   0,   0 ) )			// EF3 = red
      Color[ 2]   = solid( rgb( 220, 220,   0 ) )			// EF2 = yellow
      Color[ 1]   = solid( rgb(   0, 255,   0 ) )			// EF1 = green
      Color[ 0.1] = solid( rgb( 164, 164, 255 ) )			// EF0 = blue
      Color[ 0]   = solid( rgb(   0,   0,   0, 0 ) )
     }
   }
 }


//******************************************************************************

Program
 {
  float tdsh;

  Curve tdsh_to_ef = {
                      {  0, 0.0 },		// no detection is set to zero
                      {0.1, 0.1 },		// EF-0 start    = non-zero
                      {  3, 0.5 },		//      midpoint =  3 kft
                      {  4, 1.0 },		// EF-1 start    =  4 kft
                      {  5, 1.5 },		//      midpoint =  5 kft
                      {  6, 2.0 },		// EF-2 start    =  6 kft
                      {  8, 2.5 },		//      midpoint =  8 kft
                      { 10, 3.0 },		// EF-3 start    = 10 kft
                      { 15, 3.5 },		//      midpoint = 15 kft
                      { 21, 4.0 },		// EF-4 start    = 21 kft
                      { 26, 4.5 },		//      midpoint = 26 kft
                      { 30, 5.0 }		// EF-5 start    = 30 kft
                     };

  tdsh = 0;

  enumerate levels from 0 to HGTfromBR( 25 )
   {
    float br;

    br = BRfromHGT( level.height );			// sample BR on level
    if( br >= 25 )					// require BR >= 25
     {
      float cc;

      cc = CCfromHGT( level.height );
      if( cc < 0.92 )					// require CC < 0.92
       {
        float prob;

        prob = 40 * trapezoid( 0.00, 0.20, cc, 0.85, 0.92 ) +
               30 * weight( 25, br, 35 ) +
               20 * trapezoid( -2.5, -1.5, ZDRfromHGT( level.height ), 1.5, 2.5 ) +
               10 * weight( 0.30, NROTfromHGT( level.height ), 0.50 ) +
               10 * weight( 8, 1.9438 * SWfromHGT( level.height ), 10 );

        if( prob >= 95 )
         {
          tdsh = level.height;
         }
       }
     }
   }

  return tdsh_to_ef[ 3.2808399 / 1000 * tdsh ];	// convert TDS height to EF
 }



